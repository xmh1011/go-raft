// Code generated by MockGen. DO NOT EDIT.
// Source: transport/transport.go

// Package transport is a generated GoMock package.
package transport

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	param "github.com/xmh1011/go-raft/param"
)

// MockTransport is a mock of Transport interface.
type MockTransport struct {
	ctrl     *gomock.Controller
	recorder *MockTransportMockRecorder
}

// MockTransportMockRecorder is the mock recorder for MockTransport.
type MockTransportMockRecorder struct {
	mock *MockTransport
}

// NewMockTransport creates a new mock instance.
func NewMockTransport(ctrl *gomock.Controller) *MockTransport {
	mock := &MockTransport{ctrl: ctrl}
	mock.recorder = &MockTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransport) EXPECT() *MockTransportMockRecorder {
	return m.recorder
}

// SendAppendEntries mocks base method.
func (m *MockTransport) SendAppendEntries(target string, req *param.AppendEntriesArgs, resp *param.AppendEntriesReply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAppendEntries", target, req, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAppendEntries indicates an expected call of SendAppendEntries.
func (mr *MockTransportMockRecorder) SendAppendEntries(target, req, resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAppendEntries", reflect.TypeOf((*MockTransport)(nil).SendAppendEntries), target, req, resp)
}

// SendClientRequest mocks base method.
func (m *MockTransport) SendClientRequest(target string, req *param.ClientArgs, resp *param.ClientReply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendClientRequest", target, req, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendClientRequest indicates an expected call of SendClientRequest.
func (mr *MockTransportMockRecorder) SendClientRequest(target, req, resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendClientRequest", reflect.TypeOf((*MockTransport)(nil).SendClientRequest), target, req, resp)
}

// SendInstallSnapshot mocks base method.
func (m *MockTransport) SendInstallSnapshot(target string, req *param.InstallSnapshotArgs, resp *param.InstallSnapshotReply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInstallSnapshot", target, req, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendInstallSnapshot indicates an expected call of SendInstallSnapshot.
func (mr *MockTransportMockRecorder) SendInstallSnapshot(target, req, resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInstallSnapshot", reflect.TypeOf((*MockTransport)(nil).SendInstallSnapshot), target, req, resp)
}

// SendRequestVote mocks base method.
func (m *MockTransport) SendRequestVote(target string, req *param.RequestVoteArgs, resp *param.RequestVoteReply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequestVote", target, req, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRequestVote indicates an expected call of SendRequestVote.
func (mr *MockTransportMockRecorder) SendRequestVote(target, req, resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequestVote", reflect.TypeOf((*MockTransport)(nil).SendRequestVote), target, req, resp)
}
