// Code generated by MockGen. DO NOT EDIT.
// Source: storage/storage.go

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	param "github.com/xmh1011/go-raft/param"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AppendEntries mocks base method.
func (m *MockStorage) AppendEntries(entries []param.LogEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendEntries", entries)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendEntries indicates an expected call of AppendEntries.
func (mr *MockStorageMockRecorder) AppendEntries(entries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEntries", reflect.TypeOf((*MockStorage)(nil).AppendEntries), entries)
}

// Close mocks base method.
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// CompactLog mocks base method.
func (m *MockStorage) CompactLog(upToIndex uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompactLog", upToIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompactLog indicates an expected call of CompactLog.
func (mr *MockStorageMockRecorder) CompactLog(upToIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompactLog", reflect.TypeOf((*MockStorage)(nil).CompactLog), upToIndex)
}

// FirstLogIndex mocks base method.
func (m *MockStorage) FirstLogIndex() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstLogIndex")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstLogIndex indicates an expected call of FirstLogIndex.
func (mr *MockStorageMockRecorder) FirstLogIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstLogIndex", reflect.TypeOf((*MockStorage)(nil).FirstLogIndex))
}

// GetEntry mocks base method.
func (m *MockStorage) GetEntry(index uint64) (*param.LogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntry", index)
	ret0, _ := ret[0].(*param.LogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockStorageMockRecorder) GetEntry(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockStorage)(nil).GetEntry), index)
}

// GetState mocks base method.
func (m *MockStorage) GetState() (param.HardState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(param.HardState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockStorageMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockStorage)(nil).GetState))
}

// LastLogIndex mocks base method.
func (m *MockStorage) LastLogIndex() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastLogIndex")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastLogIndex indicates an expected call of LastLogIndex.
func (mr *MockStorageMockRecorder) LastLogIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastLogIndex", reflect.TypeOf((*MockStorage)(nil).LastLogIndex))
}

// LogSize mocks base method.
func (m *MockStorage) LogSize() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogSize")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogSize indicates an expected call of LogSize.
func (mr *MockStorageMockRecorder) LogSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogSize", reflect.TypeOf((*MockStorage)(nil).LogSize))
}

// ReadSnapshot mocks base method.
func (m *MockStorage) ReadSnapshot() (*param.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSnapshot")
	ret0, _ := ret[0].(*param.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSnapshot indicates an expected call of ReadSnapshot.
func (mr *MockStorageMockRecorder) ReadSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSnapshot", reflect.TypeOf((*MockStorage)(nil).ReadSnapshot))
}

// SaveSnapshot mocks base method.
func (m *MockStorage) SaveSnapshot(snapshot *param.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSnapshot", snapshot)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSnapshot indicates an expected call of SaveSnapshot.
func (mr *MockStorageMockRecorder) SaveSnapshot(snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSnapshot", reflect.TypeOf((*MockStorage)(nil).SaveSnapshot), snapshot)
}

// SetState mocks base method.
func (m *MockStorage) SetState(state param.HardState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetState", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetState indicates an expected call of SetState.
func (mr *MockStorageMockRecorder) SetState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockStorage)(nil).SetState), state)
}

// TruncateLog mocks base method.
func (m *MockStorage) TruncateLog(fromIndex uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TruncateLog", fromIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// TruncateLog indicates an expected call of TruncateLog.
func (mr *MockStorageMockRecorder) TruncateLog(fromIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateLog", reflect.TypeOf((*MockStorage)(nil).TruncateLog), fromIndex)
}

// MockStateMachine is a mock of StateMachine interface.
type MockStateMachine struct {
	ctrl     *gomock.Controller
	recorder *MockStateMachineMockRecorder
}

// MockStateMachineMockRecorder is the mock recorder for MockStateMachine.
type MockStateMachineMockRecorder struct {
	mock *MockStateMachine
}

// NewMockStateMachine creates a new mock instance.
func NewMockStateMachine(ctrl *gomock.Controller) *MockStateMachine {
	mock := &MockStateMachine{ctrl: ctrl}
	mock.recorder = &MockStateMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateMachine) EXPECT() *MockStateMachineMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockStateMachine) Apply(entry param.LogEntry) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", entry)
	ret0, _ := ret[0].(any)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockStateMachineMockRecorder) Apply(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockStateMachine)(nil).Apply), entry)
}

// ApplySnapshot mocks base method.
func (m *MockStateMachine) ApplySnapshot(snapshot []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplySnapshot", snapshot)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplySnapshot indicates an expected call of ApplySnapshot.
func (mr *MockStateMachineMockRecorder) ApplySnapshot(snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplySnapshot", reflect.TypeOf((*MockStateMachine)(nil).ApplySnapshot), snapshot)
}

// Get mocks base method.
func (m *MockStateMachine) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStateMachineMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStateMachine)(nil).Get), key)
}

// GetSnapshot mocks base method.
func (m *MockStateMachine) GetSnapshot() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockStateMachineMockRecorder) GetSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockStateMachine)(nil).GetSnapshot))
}
